stages:
  - build
  - test
  - check
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - frontend/node_modules/
    - backend/.venv/
    - backend/__pycache__/

build-backend:
  stage: build
  image: python:3.11
  script:
    - apt-get update && apt-get install -y portaudio19-dev && apt-get install -y ffmpeg
    - cd backend
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install -r requirements.txt
  artifacts:
    paths:
      - backend/.venv
    expire_in: 1 week
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"

test-backend:
  stage: test
  image: python:3.11
  script:
    - apt-get update && apt-get install -y portaudio19-dev
    - cd backend
    - echo "MYSQL_ROOT_PASSWORD=dummyp@ss123" >> .env  # not our real password!
    - source .venv/bin/activate
    - pip install -r requirements.txt
    - python -m pytest --junitxml="test_result.xml"
  artifacts:
    when: always
    reports:
      junit: backend/result.xml
    expire_in: 1 week
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"

build-frontend:
  stage: build
  image: node:latest
  script:
    - cd frontend
    - npm install
    - npm run lint
    - npm run format
  cache:
    paths:
      - frontend/node_modules/
    policy: pull-push
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"

test-frontend:
  stage: test
  image: node:latest
  script:
    - cd frontend
    - npm install
    - npm run test
  artifacts:
    when: always
    paths:
      - frontend/test-reports
    expire_in: 1 week
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"

check-frontend:
  stage: check
  image: node:latest
  script:
    - export PORT=8081
    - cd frontend
    - npm install
    - npm run start --port=${PORT} &
    - npx wait-on http://localhost:${PORT} -t 30000
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"

deploy-backend:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
  script:
    - cd backend
    - echo "MYSQL_ROOT_PASSWORD=dummyp@ss123" >> .env  # not our real password!
    - docker build -f Dockerfile-api -t api_image .
    - docker build -f Dockerfile-db -t db_image .
    - docker compose -f splunge.yml --env-file .env -p t23project up -d
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"

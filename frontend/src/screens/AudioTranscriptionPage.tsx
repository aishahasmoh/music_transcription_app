import * as React from "react";
import PageHeader from "../components/PageHeader";
import AudioPlaybackWave from "../components/AudioPlayerWave";
import { Container, Bottom } from "./styles/AudioTranscriptionPage.styled";
import AudioPlaybackControls from "../components/AudioPlayerControls";
import AudioTranscriptionControls from "../components/AudioTranscriptionControls";
import ChordCarousel from "../components/ChordCarousel";
import { useRoute } from "@react-navigation/native";
import { AudioTranscriptionPageProps } from "../types/NavigationStackTypes";
import { useEffect } from "react";
import { usePlayback } from "../contexts/PlaybackContext";
import { useFocusEffect } from "@react-navigation/native";

/**
 * The page that contains audio transcription data and controls for the chosen audio
 */
const AudioTranscriptionPage: React.FC<AudioTranscriptionPageProps> = () => {
  const route = useRoute<AudioTranscriptionPageProps["route"]>();
  const { uri } = route.params;
  const { loadAudio, unloadAudio } = usePlayback();

  useEffect(() => {
    if (uri) {
      loadAudio(uri);
    }
  }, [uri]);

  useFocusEffect(
    React.useCallback(() => {
      return () => {
        unloadAudio();
      };
    }, [unloadAudio]),
  );

  const meteringArray = [
    -28.092744827270508, -21.22142791748047, -22.548324584960938,
    -21.94969940185547, -22.334749221801758, -20.68360137939453,
    -18.28309440612793, -21.0323543548584, -23.40592384338379,
    -27.65897560119629, -18.701255798339844, -20.848880767822266,
    -22.784812927246094, -23.763599395751953, -14.71024227142334,
    -16.45809555053711, -16.99197006225586, -17.07990264892578,
    -16.923349380493164, -18.634578704833984, -20.087055206298828,
    -22.656702041625977, -25.224794387817383, -26.60063934326172,
    -28.121685028076172, -24.80127716064453, -25.5723876953125,
    -25.737682342529297, -28.222461700439453, -14.384289741516113,
    -16.34438705444336, -15.453339576721191, -17.041044235229492,
    -18.117019653320312, -19.109542846679688, -20.647607803344727,
    -22.160213470458984, -16.315183639526367, -19.256338119506836,
    -18.810678482055664, -21.583065032958984, -23.09389877319336,
    -24.108779907226562, -25.612348556518555, -27.606834411621094,
    -22.19631004333496, -21.806787490844727, -23.002397537231445,
    -24.5408935546875, -27.56138801574707, -30.31266212463379,
    -25.199609756469727, -26.66101837158203, -28.286453247070312,
    -30.400924682617188, -31.165246963500977, -32.501617431640625,
    -25.345125198364258, -23.42621421813965, -25.135053634643555,
    -28.330535888671875, -29.183610916137695, -27.198440551757812,
    -25.68562889099121, -26.045879364013672, -28.189125061035156,
    -15.405219078063965, -16.806228637695312, -17.432632446289062,
    -19.043148040771484, -20.98110008239746, -22.00892448425293,
    -15.410895347595215, -16.32749366760254, -15.941574096679688,
    -16.704450607299805, -13.980179786682129, -15.205083847045898,
    -14.154984474182129, -17.410266876220703, -19.690855026245117,
    -22.37877655029297, -22.882585525512695, -23.345243453979492,
    -24.627887725830078, -25.998886108398438, -18.068052291870117,
    -19.078184127807617, -22.64023208618164, -22.778528213500977,
    -23.95627212524414, -24.7738094329834, -25.045808792114258,
    -26.207096099853516, -27.782941818237305, -29.92950439453125,
    -31.247690200805664, -25.141735076904297, -27.260263442993164,
    -18.56463050842285, -19.656055450439453, -16.844743728637695,
    -18.72081756591797, -20.042036056518555, -21.860912322998047,
    -21.72856903076172, -20.138484954833984, -21.691579818725586,
    -23.615766525268555, -24.756715774536133, -26.624370574951172,
    -27.370040893554688, -25.000946044921875, -27.66986846923828,
    -29.83704948425293, -30.89664649963379, -25.581012725830078,
    -27.39817237854004, -25.633424758911133, -26.357118606567383,
  ];

  return (
    <Container>
      <PageHeader headerTitle={"alternative bass line for Kanye"} />
      <AudioPlaybackWave meteringArray={meteringArray} />
      <Bottom>
        <AudioPlaybackControls />
        <AudioTranscriptionControls />
        {/* TODO: Supply actual Chord Diagram data */}
        <ChordCarousel chordDiagrams={[0, 1, 2]} />
      </Bottom>
    </Container>
  );
};
export default AudioTranscriptionPage;
